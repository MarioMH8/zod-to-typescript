// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`identifier > export type 1`] = `
"type Zod2ts_2_duplojs = string;

export { Zod2ts_2_duplojs };"
`;

exports[`identifier > inject zod 1`] = `
{
  "BRAND": Symbol(zod_brand),
  "DIRTY": [Function],
  "EMPTY_PATH": [],
  "INVALID": {
    "status": "aborted",
  },
  "NEVER": {
    "status": "aborted",
  },
  "OK": [Function],
  "ParseStatus": [Function],
  "Schema": [Function],
  "ZodAny": [Function],
  "ZodArray": [Function],
  "ZodBigInt": [Function],
  "ZodBoolean": [Function],
  "ZodBranded": [Function],
  "ZodCatch": [Function],
  "ZodDate": [Function],
  "ZodDefault": [Function],
  "ZodDiscriminatedUnion": [Function],
  "ZodEffects": [Function],
  "ZodEnum": [Function],
  "ZodError": [Function],
  "ZodFirstPartyTypeKind": {
    "ZodAny": "ZodAny",
    "ZodArray": "ZodArray",
    "ZodBigInt": "ZodBigInt",
    "ZodBoolean": "ZodBoolean",
    "ZodBranded": "ZodBranded",
    "ZodCatch": "ZodCatch",
    "ZodDate": "ZodDate",
    "ZodDefault": "ZodDefault",
    "ZodDiscriminatedUnion": "ZodDiscriminatedUnion",
    "ZodEffects": "ZodEffects",
    "ZodEnum": "ZodEnum",
    "ZodFunction": "ZodFunction",
    "ZodIntersection": "ZodIntersection",
    "ZodLazy": "ZodLazy",
    "ZodLiteral": "ZodLiteral",
    "ZodMap": "ZodMap",
    "ZodNaN": "ZodNaN",
    "ZodNativeEnum": "ZodNativeEnum",
    "ZodNever": "ZodNever",
    "ZodNull": "ZodNull",
    "ZodNullable": "ZodNullable",
    "ZodNumber": "ZodNumber",
    "ZodObject": "ZodObject",
    "ZodOptional": "ZodOptional",
    "ZodPipeline": "ZodPipeline",
    "ZodPromise": "ZodPromise",
    "ZodReadonly": "ZodReadonly",
    "ZodRecord": "ZodRecord",
    "ZodSet": "ZodSet",
    "ZodString": "ZodString",
    "ZodSymbol": "ZodSymbol",
    "ZodTuple": "ZodTuple",
    "ZodUndefined": "ZodUndefined",
    "ZodUnion": "ZodUnion",
    "ZodUnknown": "ZodUnknown",
    "ZodVoid": "ZodVoid",
  },
  "ZodFunction": [Function],
  "ZodIntersection": [Function],
  "ZodIssueCode": {
    "custom": "custom",
    "invalid_arguments": "invalid_arguments",
    "invalid_date": "invalid_date",
    "invalid_enum_value": "invalid_enum_value",
    "invalid_intersection_types": "invalid_intersection_types",
    "invalid_literal": "invalid_literal",
    "invalid_return_type": "invalid_return_type",
    "invalid_string": "invalid_string",
    "invalid_type": "invalid_type",
    "invalid_union": "invalid_union",
    "invalid_union_discriminator": "invalid_union_discriminator",
    "not_finite": "not_finite",
    "not_multiple_of": "not_multiple_of",
    "too_big": "too_big",
    "too_small": "too_small",
    "unrecognized_keys": "unrecognized_keys",
  },
  "ZodLazy": [Function],
  "ZodLiteral": [Function],
  "ZodMap": [Function],
  "ZodNaN": [Function],
  "ZodNativeEnum": [Function],
  "ZodNever": [Function],
  "ZodNull": [Function],
  "ZodNullable": [Function],
  "ZodNumber": [Function],
  "ZodObject": [Function],
  "ZodOptional": [Function],
  "ZodParsedType": {
    "array": "array",
    "bigint": "bigint",
    "boolean": "boolean",
    "date": "date",
    "float": "float",
    "function": "function",
    "integer": "integer",
    "map": "map",
    "nan": "nan",
    "never": "never",
    "null": "null",
    "number": "number",
    "object": "object",
    "promise": "promise",
    "set": "set",
    "string": "string",
    "symbol": "symbol",
    "undefined": "undefined",
    "unknown": "unknown",
    "void": "void",
  },
  "ZodPipeline": [Function],
  "ZodPromise": [Function],
  "ZodReadonly": [Function],
  "ZodRecord": [Function],
  "ZodSchema": [Function],
  "ZodSet": [Function],
  "ZodString": [Function],
  "ZodSymbol": [Function],
  "ZodTransformer": [Function],
  "ZodTuple": [Function],
  "ZodType": [Function],
  "ZodUndefined": [Function],
  "ZodUnion": [Function],
  "ZodUnknown": [Function],
  "ZodVoid": [Function],
  "addIssueToContext": [Function],
  "any": [Function],
  "array": [Function],
  "bigint": [Function],
  "boolean": [Function],
  "coerce": {
    "bigint": [Function],
    "boolean": [Function],
    "date": [Function],
    "number": [Function],
    "string": [Function],
  },
  "custom": [Function],
  "date": [Function],
  "datetimeRegex": [Function],
  "defaultErrorMap": [Function],
  "discriminatedUnion": [Function],
  "effect": [Function],
  "enum": [Function],
  "function": [Function],
  "getErrorMap": [Function],
  "getParsedType": [Function],
  "instanceof": [Function],
  "intersection": [Function],
  "isAborted": [Function],
  "isAsync": [Function],
  "isDirty": [Function],
  "isValid": [Function],
  "late": {
    "object": [Function],
  },
  "lazy": [Function],
  "literal": [Function],
  "makeIssue": [Function],
  "map": [Function],
  "nan": [Function],
  "nativeEnum": [Function],
  "never": [Function],
  "null": [Function],
  "nullable": [Function],
  "number": [Function],
  "object": [Function],
  "objectUtil": {
    "mergeShapes": [Function],
  },
  "oboolean": [Function],
  "onumber": [Function],
  "optional": [Function],
  "ostring": [Function],
  "pipeline": [Function],
  "preprocess": [Function],
  "promise": [Function],
  "quotelessJson": [Function],
  "record": [Function],
  "set": [Function],
  "setErrorMap": [Function],
  "strictObject": [Function],
  "string": [Function],
  "symbol": [Function],
  "transformer": [Function],
  "tuple": [Function],
  "undefined": [Function],
  "union": [Function],
  "unknown": [Function],
  "util": {
    "arrayToEnum": [Function],
    "assertEqual": [Function],
    "assertIs": [Function],
    "assertNever": [Function],
    "find": [Function],
    "getValidEnumValues": [Function],
    "isInteger": [Function],
    "joinValues": [Function],
    "jsonStringifyReplacer": [Function],
    "objectKeys": [Function],
    "objectValues": [Function],
  },
  "void": [Function],
}
`;

exports[`identifier > something that is not a schema 1`] = `"type Zod2ts_3_duplojs = unknown;"`;

exports[`identifier > with identifier 1`] = `
"type Comment = {
    user: User;
    content: string;
};

type Post = {
    title: string;
    content: string;
    date: Date;
    comments: Comment[];
};

type User = {
    userId: number;
    firstname: string;
    lastname: string;
    posts: Post[];
};"
`;

exports[`identifier > with identifier as zod schema 1`] = `"type Zod2ts_0_duplojs = string;"`;
